package deakin.sit.improvedpersonalizedlearningexperiencesapp.task;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.List;

import deakin.sit.improvedpersonalizedlearningexperiencesapp.MainActivity;
import deakin.sit.improvedpersonalizedlearningexperiencesapp.R;
import deakin.sit.improvedpersonalizedlearningexperiencesapp.database.StudentTask;
import deakin.sit.improvedpersonalizedlearningexperiencesapp.database.StudentTaskQuestion;

public class TaskQuestionFragment extends Fragment {
    private static final String TAG = "INFO:TaskQuestionFragment";
    StudentTask currentTask;
    List<StudentTaskQuestion> currentQuestionList;

    TextView noteTextView, taskTitleTextView, taskDescriptionTextView;
    Button submitButton;
    RecyclerView questionRecyclerView;
    QuestionAdapter questionAdapter;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_task_question, container, false);

        // Get data
        currentTask = ((TaskActivity) getActivity()).currentTask;
        currentQuestionList = currentTask.getStudentTaskQuestions();

        // Setup views
        questionRecyclerView = view.findViewById(R.id.questionRecyclerView);
        submitButton = view.findViewById(R.id.submitButton);
        noteTextView = view.findViewById(R.id.noteTextView);
        taskTitleTextView = view.findViewById(R.id.taskTitleTextView);
        taskDescriptionTextView = view.findViewById(R.id.taskDescriptionTextView);

        // Config views
        noteTextView.setText("Generated by AI");
        taskTitleTextView.setText(currentTask.getTitle());
        taskDescriptionTextView.setText(currentTask.getDescription());

        // Config button
        submitButton.setOnClickListener(this::handleSubmitButton);

        // Config recycler view
        questionAdapter = new QuestionAdapter(currentQuestionList, this);
        questionRecyclerView.setAdapter(questionAdapter);
        questionRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        return view;
    }

    public void handleSubmitButton(View view) {
        int score = 0;

        // Update score data
        currentQuestionList = questionAdapter.getResult();
        for (StudentTaskQuestion question : currentQuestionList) {
            if (question.isCorrest()) {
                score += 1;
            }
        }

        // Update data: task status, score and selected answers
        currentTask.setScore(score);
        currentTask.setFinish(true);
        currentTask.setStudentTaskQuestions(currentQuestionList);

        saveTaskDetail();
    }

    // Backend database interaction
    private void saveTaskDetail() {
        RequestQueue queue = Volley.newRequestQueue(getContext());

        JSONArray questionJSONArray = new JSONArray();
        for (StudentTaskQuestion question : currentTask.getStudentTaskQuestions()) {
            JSONObject jsonQuestion = new JSONObject();
            try {
                jsonQuestion.put("title", currentTask.getTitle());
                jsonQuestion.put("description", currentTask.getDescription());
                jsonQuestion.put("choices", new JSONArray(question.getChoices()));
                jsonQuestion.put("correctAnswer", question.getCorrectAnswer());
                jsonQuestion.put("selectedAnswer", question.getSelectedAnswer());
            } catch (Exception e) {
                Log.e(TAG, "Error creating task question JSON: " + e.getMessage(), e);
                return;
            }
            questionJSONArray.put(jsonQuestion);
        }

        JSONObject jsonBody = new JSONObject();
        try {
            jsonBody.put("finish", currentTask.isFinish());
            jsonBody.put("score", currentTask.getScore());
            jsonBody.put("listQuestion", questionJSONArray);
        } catch (Exception e) {
            Log.e(TAG, "Error creating request body JSON: " + e.getMessage(), e);
            return;
        }

        String url = MainActivity.BACKEND_URL + "tasks/" + currentTask.getId();
        JsonObjectRequest request = new JsonObjectRequest(Request.Method.PUT, url, jsonBody,
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {
                        try {
                            // To result fragment
                            ((TaskActivity) getActivity()).finishTask(response.getString("message"));
                        } catch (Exception e) {
                            Log.e(TAG, "Error parsing response: " + e.getMessage(), e);
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        String errorMsg = error.networkResponse != null ? "HTTP " + error.networkResponse.statusCode + ": " + new String(error.networkResponse.data) : error.getMessage() != null ? error.getMessage() : "Unknown error";
                        Log.e(TAG, "Error saving: " + errorMsg, error);
                    }
                });

        request.setRetryPolicy(new DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(request);
    }
}